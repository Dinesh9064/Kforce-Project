# Milestone 5: PowerShell Automation for File Generation

# Get Storage Account details
data "azurerm_storage_account" "existing" {
  name                = local.storage_account_name
  resource_group_name = local.resource_group_name
}

# Get Function App details
data "azurerm_function_app" "existing" {
  name                = local.function_app_name
  resource_group_name = local.resource_group_name
}

# Create a container for the generated files if it doesn't exist
resource "azurerm_storage_container" "generated_files" {
  name                  = var.blob_container_name
  storage_account_name  = local.storage_account_name
  container_access_type = "private"
}

# Create PowerShell script for local execution
resource "local_file" "local_ps_script" {
  content  = <<-EOT
    <#
    .SYNOPSIS
        Generates a file with a random 20-digit number and uploads it to Azure Storage.

    .DESCRIPTION
        This script generates a random 20-digit number, creates a file containing this number,
        and uploads it to a specified container in an Azure Storage account.

    .PARAMETER StorageAccountName
        The name of the Azure Storage account.

    .PARAMETER ResourceGroupName
        The name of the resource group containing the Storage account.

    .PARAMETER ContainerName
        The name of the container to upload the file to. Default is "generated-files".

    .PARAMETER FileName
        The name of the file to create. Default is "random-number-{timestamp}.txt".

    .EXAMPLE
        .\${var.powershell_script_name} -StorageAccountName "mystorageaccount" -ResourceGroupName "myresourcegroup"

    .NOTES
        This script requires the Az PowerShell module and an authenticated Azure session.
    #>

    param(
        [Parameter(Mandatory=$true)]
        [string]$StorageAccountName,

        [Parameter(Mandatory=$true)]
        [string]$ResourceGroupName,

        [Parameter(Mandatory=$false)]
        [string]$ContainerName = "${var.blob_container_name}",

        [Parameter(Mandatory=$false)]
        [string]$FileName = "random-number-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
    )

    # Function to generate a random 20-digit number
    function Get-Random20DigitNumber {
        $randomNumber = ""
        for ($i = 0; $i -lt 20; $i++) {
            $randomNumber += Get-Random -Minimum 0 -Maximum 10
        }
        return $randomNumber
    }

    try {
        # Login to Azure if not already logged in
        $context = Get-AzContext
        if (!$context) {
            Write-Host "Please login to Azure..." -ForegroundColor Yellow
            Connect-AzAccount
        }

        # Generate random 20-digit number
        $randomNumber = Get-Random20DigitNumber
        Write-Host "Generated random 20-digit number: $randomNumber" -ForegroundColor Green

        # Generate file content
        $content = @"
    Random 20-digit number: $randomNumber
    Generated at: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
    Generated by: Local PowerShell Script
    Computer: $env:COMPUTERNAME
    "@

        # Create temp file
        $tempFile = New-TemporaryFile
        Set-Content -Path $tempFile.FullName -Value $content

        # Get storage account key
        $storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName)[0].Value
        $storageContext = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $storageAccountKey

        # Create container if it doesn't exist
        $container = Get-AzStorageContainer -Name $ContainerName -Context $storageContext -ErrorAction SilentlyContinue
        if (!$container) {
            Write-Host "Creating container '$ContainerName'..." -ForegroundColor Yellow
            New-AzStorageContainer -Name $ContainerName -Context $storageContext -Permission Off
        }

        # Upload file to blob storage
        Set-AzStorageBlobContent -File $tempFile.FullName -Container $ContainerName -Blob $FileName -Context $storageContext -Force

        # Clean up temp file
        Remove-Item -Path $tempFile.FullName -Force

        Write-Host "Successfully uploaded file '$FileName' to container '$ContainerName' in storage account '$StorageAccountName'" -ForegroundColor Green

        # Return the URL to the uploaded file
        $blobUrl = "https://$StorageAccountName.blob.core.windows.net/$ContainerName/$FileName"
        Write-Host "Blob URL: $blobUrl" -ForegroundColor Cyan

        return $blobUrl
    }
    catch {
        Write-Host "Error: $_" -ForegroundColor Red
        throw $_
    }
    EOT
  filename = "${path.module}/${var.powershell_script_name}"
}

# Create the function files for the Function App
# function.json file for timer trigger
resource "local_file" "function_json" {
  content  = <<-EOT
    {
      "bindings": [
        {
          "name": "Timer",
          "type": "timerTrigger",
          "direction": "in",
          "schedule": "${var.cron_expression}"
        }
      ]
    }
    EOT
  filename = "${path.module}/${var.function_name}/function.json"
}

# PowerShell script for the function
resource "local_file" "function_script" {
  content  = <<-EOT
    # Input bindings are passed in via param block.
    param($Timer)

    # Get the current UTC time
    $currentUTCtime = (Get-Date).ToUniversalTime()
    Write-Host "PowerShell timer trigger function executed at: $currentUTCtime"

    # Function to generate a random 20-digit number
    function Get-Random20DigitNumber {
        $randomNumber = ""
        for ($i = 0; $i -lt 20; $i++) {
            $randomNumber += Get-Random -Minimum 0 -Maximum 10
        }
        return $randomNumber
    }

    try {
        # Generate the random 20-digit number
        $randomNumber = Get-Random20DigitNumber
        Write-Host "Generated random 20-digit number: $randomNumber"

        # Get environment variables
        $storageAccountName = $env:STORAGE_ACCOUNT_NAME
        $containerName = $env:CONTAINER_NAME
        $FileName = "random-number-$((Get-Date).ToString('yyyyMMdd-HHmmss')).txt"

        # Generate file content
        $content = @"
    Random 20-digit number: $randomNumber
    Generated at: $currentUTCtime
    Generated by: Azure Function
    Function Name: ${var.function_name}
    "@

        # Create a temporary file
        $tempFilePath = Join-Path -Path $env:TEMP -ChildPath $FileName
        Set-Content -Path $tempFilePath -Value $content

        # Use the storage account to upload the file
        if ($env:AzureWebJobsStorage) {
            $storageContext = New-AzStorageContext -ConnectionString $env:AzureWebJobsStorage
        }
        else {
            # Connect to Azure using managed identity
            Connect-AzAccount -Identity

            # Get storage account key
            $resourceGroupName = $env:RESOURCE_GROUP_NAME
            $storageAccountKey = (Get-AzStorageAccountKey -ResourceGroupName $resourceGroupName -Name $storageAccountName)[0].Value
            $storageContext = New-AzStorageContext -StorageAccountName $storageAccountName -StorageAccountKey $storageAccountKey
        }

        # Create container if it doesn't exist
        $container = Get-AzStorageContainer -Name $containerName -Context $storageContext -ErrorAction SilentlyContinue
        if (!$container) {
            Write-Host "Creating container '$containerName'..."
            New-AzStorageContainer -Name $containerName -Context $storageContext -Permission Off
        }

        # Upload file to storage
        $blob = Set-AzStorageBlobContent -File $tempFilePath -Container $containerName -Blob $FileName -Context $storageContext -Force

        # Clean up temp file
        Remove-Item -Path $tempFilePath -Force

        # Return success
        Write-Host "Successfully uploaded file '$FileName' to container '$containerName' in storage account '$storageAccountName'"
        Write-Host "Blob URL: $($blob.ICloudBlob.Uri.AbsoluteUri)"
    }
    catch {
        Write-Host "Error: $_"
        throw $_
    }
    EOT
  filename = "${path.module}/${var.function_name}/run.ps1"
}

# Create host.json file for the Function App
resource "local_file" "host_json" {
  content  = <<-EOT
    {
      "version": "2.0",
      "extensionBundle": {
        "id": "Microsoft.Azure.Functions.ExtensionBundle",
        "version": "[3.*, 4.0.0)"
      },
      "managedDependency": {
        "enabled": true
      }
    }
    EOT
  filename = "${path.module}/host.json"
}

# Create a ZIP archive of the function files
data "archive_file" "function_zip" {
  type        = "zip"
  output_path = "${path.module}/${var.function_name}.zip"

  source {
    content  = local_file.function_json.content
    filename = "${var.function_name}/function.json"
  }

  source {
    content  = local_file.function_script.content
    filename = "${var.function_name}/run.ps1"
  }

  source {
    content  = local_file.host_json.content
    filename = "host.json"
  }
}

# Create a bash script to deploy the function to the Function App
resource "local_file" "deploy_script" {
  content  = <<-EOT
    #!/bin/bash

    # Script to deploy the scheduled function to the Function App

    # Function App details
    FUNCTION_APP_NAME="${local.function_app_name}"
    RESOURCE_GROUP="${local.resource_group_name}"
    STORAGE_ACCOUNT_NAME="${local.storage_account_name}"
    CONTAINER_NAME="${var.blob_container_name}"

    # Check if user is logged in to Azure
    echo "Checking Azure login status..."
    az account show > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "Please log in to Azure first:"
        az login
    fi

    # Deploy the function to the Function App
    echo "Deploying the function to $FUNCTION_APP_NAME..."
    az functionapp deployment source config-zip \
        --resource-group $RESOURCE_GROUP \
        --name $FUNCTION_APP_NAME \
        --src "${var.function_name}.zip"

    # Set the required application settings
    echo "Configuring application settings..."
    az functionapp config appsettings set \
        --resource-group $RESOURCE_GROUP \
        --name $FUNCTION_APP_NAME \
        --settings \
        "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" \
        "CONTAINER_NAME=$CONTAINER_NAME" \
        "RESOURCE_GROUP_NAME=$RESOURCE_GROUP"

    echo "Deployment completed successfully!"

    # Print info on how to test the function
    echo
    echo "Function Information:"
    echo "---------------------"
    echo "Function App: $FUNCTION_APP_NAME"
    echo "Function Name: ${var.function_name}"
    echo "Schedule: ${var.cron_expression}"
    echo "Storage Account: $STORAGE_ACCOUNT_NAME"
    echo "Container: $CONTAINER_NAME"
    echo
    echo "You can manually trigger the function or wait for the scheduled execution."
    echo "To check the logs, go to the Function App in the Azure Portal and navigate to the function's Monitor page."
    EOT
  filename = "${path.module}/deploy_function.sh"
}

# Create a PowerShell script to deploy the function to the Function App (for Windows users)
resource "local_file" "deploy_script_ps" {
  content  = <<-EOT
    <#
    .SYNOPSIS
        Deploys the scheduled function to the Function App.
    #>

    # Function App details
    $functionAppName = "${local.function_app_name}"
    $resourceGroup = "${local.resource_group_name}"
    $storageAccountName = "${local.storage_account_name}"
    $containerName = "${var.blob_container_name}"

    # Check if user is logged in to Azure
    Write-Host "Checking Azure login status..." -ForegroundColor Cyan
    $azLoginStatus = az account show 2>$null
    if (-not $azLoginStatus) {
        Write-Host "Please log in to Azure first:" -ForegroundColor Yellow
        az login
    }

    # Deploy the function to the Function App
    Write-Host "Deploying the function to $functionAppName..." -ForegroundColor Cyan
    az functionapp deployment source config-zip `
        --resource-group $resourceGroup `
        --name $functionAppName `
        --src "${var.function_name}.zip"

    # Set the required application settings
    Write-Host "Configuring application settings..." -ForegroundColor Cyan
    az functionapp config appsettings set `
        --resource-group $resourceGroup `
        --name $functionAppName `
        --settings `
        "STORAGE_ACCOUNT_NAME=$storageAccountName" `
        "CONTAINER_NAME=$containerName" `
        "RESOURCE_GROUP_NAME=$resourceGroup"

    Write-Host "Deployment completed successfully!" -ForegroundColor Green

    # Print info on how to test the function
    Write-Host ""
    Write-Host "Function Information:" -ForegroundColor Cyan
    Write-Host "---------------------" -ForegroundColor Cyan
    Write-Host "Function App: $functionAppName"
    Write-Host "Function Name: ${var.function_name}"
    Write-Host "Schedule: ${var.cron_expression}"
    Write-Host "Storage Account: $storageAccountName"
    Write-Host "Container: $containerName"
    Write-Host ""
    Write-Host "You can manually trigger the function or wait for the scheduled execution." -ForegroundColor Yellow
    Write-Host "To check the logs, go to the Function App in the Azure Portal and navigate to the function's Monitor page." -ForegroundColor Yellow
    EOT
  filename = "${path.module}/deploy_function.ps1"
}

# Create a PS1 script to test the local PowerShell script
resource "local_file" "test_local_script" {
  content  = <<-EOT
    <#
    .SYNOPSIS
        Tests the local PowerShell script for generating random numbers.
    #>

    # Storage Account details
    $storageAccountName = "${local.storage_account_name}"
    $resourceGroup = "${local.resource_group_name}"
    $containerName = "${var.blob_container_name}"

    # Ensure Azure module is available
    if (-not (Get-Module -ListAvailable -Name Az.Storage)) {
        Write-Host "The Az.Storage module is required. Installing..." -ForegroundColor Yellow
        Install-Module -Name Az.Storage -Force -Scope CurrentUser
    }

    # Check if user is logged in to Azure
    Write-Host "Checking Azure login status..." -ForegroundColor Cyan
    $azContext = Get-AzContext
    if (-not $azContext) {
        Write-Host "Please log in to Azure first:" -ForegroundColor Yellow
        Connect-AzAccount
    }

    # Run the local script
    Write-Host "Running the local PowerShell script..." -ForegroundColor Cyan
    $scriptPath = Join-Path -Path $PSScriptRoot -ChildPath "${var.powershell_script_name}"

    & $scriptPath -StorageAccountName $storageAccountName -ResourceGroupName $resourceGroup -ContainerName $containerName

    Write-Host ""
    Write-Host "You can check the generated file in the Azure Portal:" -ForegroundColor Cyan
    Write-Host "1. Go to the Storage Account: $storageAccountName"
    Write-Host "2. Navigate to Containers > $containerName"
    Write-Host "3. You should see a file named 'random-number-*.txt'"
    EOT
  filename = "${path.module}/test_local_script.ps1"
}